<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.littlearphone</groupId>
    <artifactId>clone</artifactId>
    <version>0.0.3-SNAPSHOT</version>
    <modules>
        <module>common</module>
        <module>schedule</module>
        <module>wrapper</module>
    </modules>
    <packaging>pom</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.4.RELEASE</version>
    </parent>

    <properties>
        <project.encoding>UTF-8</project.encoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.version>1.8</maven.compiler.version>

        <earphone.common.version>0.0.5-SNAPSHOT</earphone.common.version>
        <earphone.schedule.version>0.0.2-SNAPSHOT</earphone.schedule.version>
        <earphone.wrapper.version>0.0.8-SNAPSHOT</earphone.wrapper.version>
        <quartz.version>2.2.1</quartz.version>
        <cglib.version>3.1</cglib.version>
        <druid.version>1.0.13</druid.version>
        <logback.ext.spring>0.1.4</logback.ext.spring>
        <commons.io.version>2.4</commons.io.version>
        <commons-lang3.version>3.4</commons-lang3.version>
        <commons.httpclient>3.1</commons.httpclient>
        <commons.http.version>4.4</commons.http.version>
        <json.lib.version>2.4</json.lib.version>
        <mybatis.spring.version>1.2.0</mybatis.spring.version>
        <testng.version>6.11</testng.version>
        <lombok.version>1.16.16</lombok.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.littlearphone</groupId>
                <artifactId>common</artifactId>
                <version>${earphone.common.version}</version>
            </dependency>
            <dependency>
                <groupId>com.littlearphone</groupId>
                <artifactId>schedule</artifactId>
                <version>${earphone.schedule.version}</version>
            </dependency>
            <dependency>
                <groupId>com.littlearphone</groupId>
                <artifactId>wrapper</artifactId>
                <version>${earphone.wrapper.version}</version>
            </dependency>
            <!--spring-->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context-support</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.version}</version>
            </dependency>
            <!-- jedis dependencies -->
            <dependency>
                <groupId>redis.clients</groupId>
                <artifactId>jedis</artifactId>
                <version>${jedis.version}</version>
                <scope>compile</scope>
                <type>jar</type>
            </dependency>
            <!-- db dependencies -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
            <!-- com.earphone.wrapperpper dependencies -->
            <dependency>
                <groupId>cglib</groupId>
                <artifactId>cglib</artifactId>
                <version>${cglib.version}</version>
            </dependency>
            <!-- quartz dependencies -->
            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz</artifactId>
                <version>${quartz.version}</version>
            </dependency>
            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz-jobs</artifactId>
                <version>${quartz.version}</version>
            </dependency>
            <!-- logging dependencies -->
            <dependency>
                <groupId>org.logback-extensions</groupId>
                <artifactId>logback-ext-spring</artifactId>
                <version>${logback.ext.spring}</version>
            </dependency>
            <!-- plugin dependencies -->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons.io.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${commons.http.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/commons-httpclient/commons-httpclient -->
            <dependency>
                <groupId>commons-httpclient</groupId>
                <artifactId>commons-httpclient</artifactId>
                <version>${commons.httpclient}</version>
            </dependency>
            <dependency>
                <groupId>net.sf.json-lib</groupId>
                <artifactId>json-lib</artifactId>
                <version>${json.lib.version}</version>
                <classifier>jdk15</classifier>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.testng/testng -->
            <dependency>
                <groupId>org.testng</groupId>
                <artifactId>testng</artifactId>
                <version>${testng.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!--spring-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <!--使用Lombok生成的代码(如@Builder的builder())不能使用静态导入，否则maven编译会失败-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
    </dependencies>

    <build>
        <!-- 主资源目录 -->
        <resources>
            <!--描述存放资源的目录，该路径相对POM路径-->
            <!--如果在源码路径有配置文件需要管理，一定要配置这个-->
            <!--<resource>
                <directory>${basedir}/src/main/java</directory>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>-->
            <resource>
                <!-- 设定主资源目录 -->
                <directory>${basedir}/src/main/resources</directory>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，只处理如下配置中包含的资源类型 -->
                <!-- <includes> <include>*.xml</include> </includes> -->
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，不处理如下配置中包含的资源类型（剔除下如下配置中包含的资源类型) -->
                <!-- <excludes> <exclude>*.xml</exclude> </excludes> -->
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，指定处理后的资源文件输出目录，默认是${build.outputDirectory}指定的目录 -->
                <!-- <targetPath>d:/</targetPath> -->
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，是否对主资源目录开启资源过滤 -->
                <filtering>true</filtering>
            </resource>
        </resources>
        <!--因为使用了Lombok，所以编译和打包用的路径不能是原始路径，需要按照Lombok具体输出路径进行配置-->
        <sourceDirectory>${project.build.directory}/generated-sources/delombok</sourceDirectory>
        <testSourceDirectory>${project.build.directory}/generated-test-sources/delombok</testSourceDirectory>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
            </plugin>
            <!-- jar插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
            </plugin>
            <!--
            生成源码包的插件，需要进行略微配置。
            从上到下，配置了很多地方，而且都是有关联的，之所以要搞这么复杂，
            是因为lombok源码和生成的class对不上，在调试的时候会不方便
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>source-package</id>
                        <!--
                        因为源码是lombok生成的，晚于generated-source阶段，
                        所以不能在原始的generated-source阶段进行，
                        而为了满足这个需求，还要配合使用jar-no-fork
                        -->
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--这里编译用的路径是maven的sourceDirectory和testSourceDirectory，所以上面要改掉-->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <encoding>${project.encoding}</encoding>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <compilerVersion>${maven.compiler.version}</compilerVersion>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok-maven-plugin</artifactId>
                <version>1.16.16.0</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
                <executions>
                    <execution>
                        <id>lombok-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>delombok</goal>
                        </goals>
                        <configuration>
                            <!--
                            使用lombok的源码路径，默认的是src/main/lombok，
                            为了避免修改源文件目录所以按照实际的目录进行配置
                            -->
                            <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>lombok-test-source</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testDelombok</goal>
                        </goals>
                        <configuration>
                            <!--这个地方配置的原因和上面是一样的-->
                            <sourceDirectory>${basedir}/src/test/java</sourceDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.7.9</version>
                <executions>
                    <execution>
                        <!--存在多个execution的时候需要定义唯一id-->
                        <id>jacoco-prepare</id>
                        <goals>
                            <!--配置goal的时候要注意phase,如果不匹配会出不来exec数据文件-->
                            <goal>prepare-agent</goal>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <!--
                        如果用integration的话,需要单独配置phase,而且,
                        数据文件名称默认为jacoco-it.exec,所以需要稍微修改一下配置.
                    -->
                    <!--<execution>
                        <id>jacoco-verify</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>report-integration</goal>
                        </goals>
                        <configuration>
                            <dataFile>jacoco.exe</dataFile>
                        </configuration>
                    </execution>-->
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.6</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>site</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/${artifactId}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!--这货有递归分析的逻辑，如果引用深度比较夸张，有可能会出现栈溢出的情况-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>2.5</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.8</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>pmd</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <linkXRef>true</linkXRef>
                    <sourceEncoding>utf-8</sourceEncoding>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>findbugs</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- 设置分析工作的等级，可以为Min、Default和Max -->
                    <effort>Max</effort>
                    <!-- Low、Medium和High (Low最严格) -->
                    <threshold>Low</threshold>
                    <xmlOutput>true</xmlOutput>
                    <findbugsXmlOutput>true</findbugsXmlOutput>
                    <jvmArgs>-Dfile.encoding=UTF-8</jvmArgs>
                    <!--findbugs需要忽略的错误的配置文件-->
                    <!--<excludeFilterFile>findbugs/findbugs-exclude-filter.xml</excludeFilterFile>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>xml-maven-plugin</artifactId>
                <version>1.0.1</version>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals>
                            <goal>transform</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--
                        在maven下生成的findbugs报告是xml文件,需要用特定插件进行转化
                        com.google.code.findbugs的包里有六种转换的样式可供选择
                    -->
                    <transformationSets>
                        <transformationSet>
                            <dir>${project.build.directory}</dir>
                            <includes>
                                <include>findbugsXml.xml</include>
                            </includes>
                            <outputDir>${project.reporting.outputDirectory}</outputDir>
                            <!--<stylesheet>fancy-hist.xsl</stylesheet>-->
                            <!--<stylesheet>default.xsl</stylesheet>-->
                            <!--<stylesheet>plain.xsl</stylesheet>-->
                            <!--<stylesheet>fancy.xsl</stylesheet>-->
                            <!--<stylesheet>summary.xsl</stylesheet>-->
                            <stylesheet>color.xsl</stylesheet>
                            <fileMappers>
                                <fileMapper implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
                                    <targetExtension>.html</targetExtension>
                                </fileMapper>
                            </fileMappers>
                        </transformationSet>
                    </transformationSets>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.google.code.findbugs</groupId>
                        <artifactId>findbugs</artifactId>
                        <version>3.0.1</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!--这个插件被用来集中和清理各种输出-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <reporting>
        <outputDirectory>${project.build.directory}/${artifactId}</outputDirectory>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </reporting>

    <!-- 设定主仓库，按设定顺序进行查找。 -->
    <repositories>

        <!-- 如有Nexus私服, 取消注释并指向正确的服务器地址. -->
        <!--<repository>
            <id>nexus-repos</id>
            <name>Team Nexus Repository</name>
            <url>http://192.168.11.36:8888/nexus/content/groups/public</url>
        </repository>-->
        <!--<repository>
            <id>maven-restlet</id>
            <name>Public online Restlet repository</name>
            <url>http://maven.restlet.org</url>
        </repository>

        <repository>
            <id>oschina-repos</id>
            <name>Oschina Releases</name>
            <url>http://maven.oschina.net/content/groups/public</url>
        </repository>

        <repository>
            <id>java-repos</id>
            <name>Java Repository</name>
            <url>http://download.java.net/maven/2/</url>
        </repository>

        <repository>
            <id>springsource-repos</id>
            <name>SpringSource Repository</name>
            <url>http://repo.spring.io/release/</url>
        </repository>

        <repository>
            <id>central-repos</id>
            <name>Central Repository</name>
            <url>http://repo.maven.apache.org/maven2</url>
        </repository>

        <repository>
            <id>central-repos2</id>
            <name>Central Repository 2</name>
            <url>http://repo1.maven.org/maven2/</url>
        </repository>

        <repository>
            <id>activiti-repos</id>
            <name>Activiti Repository</name>
            <url>https://maven.alfresco.com/nexus/content/groups/public</url>
        </repository>

        <repository>
            <id>activiti-repos2</id>
            <name>Activiti Repository 2</name>
            <url>https://app.camunda.com/nexus/content/groups/public</url>
        </repository>

        <repository>
            <id>thinkgem-repos</id>
            <name>ThinkGem Repository</name>
            <url>http://git.oschina.net/thinkgem/repos/raw/master</url>
        </repository>

        <repository>
            <id>thinkgem-repos2</id>
            <name>ThinkGem Repository 2</name>
            <url>https://raw.github.com/thinkgem/repository/master</url>
        </repository>-->

    </repositories>

</project>